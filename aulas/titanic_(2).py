# -*- coding: utf-8 -*-
"""Titanic (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EVbpMkyQsNTaIPmqwVpHLs7d5eCEa0YF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import plotly.express as px

df = pd.read_csv('titanic_train.csv')

df.head(10)

df.info()

df.describe().round(2)

446.00 - 223.50	, 668.50	- 446.00

28.00 - 20.12, 38 - 28

sobrevi = df[df['Survived'] == 1]
no_sobrevi = df[df['Survived'] == 0]

print(f' Sobreviventes: {len(sobrevi)}')
print(f' Não sobreviventes: {len(no_sobrevi)}')

549/(549+342)

df.groupby('Pclass').size()

pd.crosstab(df['Pclass'], df['Sex'])

pd.crosstab(df['Pclass'], df['Survived'])

pd.crosstab(df['Pclass'], df['Age'])

df['Sex'].value_counts()

pd.crosstab(df['Embarked'], df['Survived'])

df.isna().sum()

sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')

fig = px.box(df, x='Pclass', y='Age')
fig.show()

plt.figure(figsize=(12, 7))
sns.boxplot(x='Pclass', y='Age', data=df, palette='winter')

def input_age(cols):
  Age = cols[0]
  Pclass = cols[1]

  if pd.isnull(Age):
    if Pclass == 1:
      return 37
    elif Pclass == 2:
      return 29
    else:
      return 24
  else:
    return Age

df['Age'] = df[['Age', 'Pclass']].apply(input_age, axis=1)

sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')

df.drop('Cabin', axis=1, inplace=True)

df.head()

df.info()

df.dropna(inplace=True)

df.info()

sns.set_style('darkgrid')
sns.countplot(x='Survived', data=df, palette='RdBu_r')
plt.xlabel('Sobreviventes')
plt.ylabel('Contagem')
plt.title('Contagem de Pessoas')
plt.xticks([0, 1], ['Não Sobreviventes', 'Sobreviventes'])

survival_counts = df.groupby(['Sex', 'Survived']).size().unstack()

survival_percents = survival_counts.div(survival_counts.sum(axis=1), axis=0)*100
survival_percents

sns.set_style('whitegrid')

ax =  survival_percents.plot(kind='bar', stacked=True, colormap='RdBu_r')
plt.xlabel('Sobreviventes')
plt.ylabel('Procentagem')
plt.title('Procentagem de Pessoas Por Sexo')

plt.xticks([0, 1], ['Não Sobreviveu', 'Sobreviveu'])
plt.legend(title='Sexo', loc='upper left', labels=['Feminino', 'Masculino'])

for i in range(len(survival_percents)):
  female_percents = survival_percents.iloc[i, 0]
  male_percents = survival_percents.iloc[i, 1]
  ax.text(i, female_percents / 2, f'{female_percents:.2f}%', ha='center', color='white')
  ax.text(i, female_percents + male_percents / 2, f'{male_percents:.2f}%', ha='center', color='white')

plt.show()

criancas = df[(df['Age'] < 10) & (df['Survived'] == 1)]
len(criancas)

df['Age'].hist(bins=30, color='darkred', alpha=0.2)

plt.show()

df

sex = pd.get_dummies(df['Sex'], drop_first=True)
embark = pd.get_dummies(df['Embarked'], drop_first=True)

df.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)

df.head()

df = pd.concat([df, sex, embark], axis=1)

df